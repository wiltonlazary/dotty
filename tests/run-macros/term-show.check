{
  class C() {
    def a: scala.Int = 0
    private[this] def b: scala.Int = 0
    private[this] def c: scala.Int = 0
    private[C] def d: scala.Int = 0
    protected def e: scala.Int = 0
    protected[this] def f: scala.Int = 0
    protected[C] def g: scala.Int = 0
  }
  ()
}
@scala.annotation.internal.SourceFile("tests/run-macros/term-show/Test_2.scala") trait A() extends java.lang.Object {
  def imp(x: scala.Int)(implicit str: scala.Predef.String): scala.Int
  def use(`x₂`: scala.Int)(using `str₂`: scala.Predef.String): scala.Int
  def era(`x₃`: scala.Int)(erased `str₃`: scala.Predef.String): scala.Int
  def f1(x1: scala.Int, erased x2: scala.Int): scala.Int
  def f2(erased `x1₂`: scala.Int, erased `x2₂`: scala.Int): scala.Int
  def f3(using `x1₃`: scala.Int, erased `x2₃`: scala.Int): scala.Int
  def f4(using erased `x1₄`: scala.Int, erased `x2₄`: scala.Int): scala.Int
}
