-- Error: tests/neg-custom-args/captures/usingLogFile.scala:31:6 -------------------------------------------------------
31 |  var later3: () => Unit = () => ()  // error
   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |  Mutable variable later3 cannot have type box () => Unit since
   |  that type captures the root capability `cap`.
   |  This restriction serves to prevent local capabilities from escaping the scope where they are defined.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:35:6 -------------------------------------------------------
35 |  var later4: Cell[() => Unit] = Cell(() => ())  // error
   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |  Mutable variable later4 cannot have type Test2.Cell[() => Unit] since
   |  the part () => Unit of that type captures the root capability `cap`.
   |  This restriction serves to prevent local capabilities from escaping the scope where they are defined.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:23:14 ------------------------------------------------------
23 |  val later = usingLogFile { f => () => f.write(0) } // error
   |              ^^^^^^^^^^^^
   |              Sealed type variable T cannot be instantiated to box () => Unit since
   |              that type captures the root capability `cap`.
   |              This is often caused by a local capability in an argument of method usingLogFile
   |              leaking as part of its result.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:28:23 ------------------------------------------------------
28 |  private val later2 = usingLogFile { f => Cell(() => f.write(0)) } // error
   |                       ^^^^^^^^^^^^
   |                       Sealed type variable T cannot be instantiated to box Test2.Cell[() => Unit]^? since
   |                       the part () => Unit of that type captures the root capability `cap`.
   |                       This is often caused by a local capability in an argument of method usingLogFile
   |                       leaking as part of its result.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:47:6 -------------------------------------------------------
47 |  val later = usingLogFile { f => () => f.write(0) } // error
   |  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |  Non-local value later cannot have an inferred type
   |  () => Unit
   |  with non-empty capture set {x$0, cap}.
   |  The type needs to be declared explicitly.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:62:16 ------------------------------------------------------
62 |    val later = usingFile("out", f => (y: Int) => xs.foreach(x => f.write(x + y))) // error
   |                ^^^^^^^^^
   |                Sealed type variable T cannot be instantiated to box (x$0: Int) => Unit since
   |                that type captures the root capability `cap`.
   |                This is often caused by a local capability in an argument of method usingFile
   |                leaking as part of its result.
-- Error: tests/neg-custom-args/captures/usingLogFile.scala:71:16 ------------------------------------------------------
71 |    val later = usingFile("logfile",            // error
   |                ^^^^^^^^^
   |                Sealed type variable T cannot be instantiated to box () => Unit since
   |                that type captures the root capability `cap`.
   |                This is often caused by a local capability in an argument of method usingFile
   |                leaking as part of its result.
