-- Error: tests/neg-custom-args/captures/buffers.scala:11:6 ------------------------------------------------------------
11 |  var elems: Array[A] = new Array[A](10) // error // error
   |      ^
   |      Mutable variable elems cannot have type Array[A] since
   |      that type refers to the type variable A, which is not sealed.
-- Error: tests/neg-custom-args/captures/buffers.scala:16:38 -----------------------------------------------------------
16 |  def make[A: ClassTag](xs: A*) = new ArrayBuffer: // error
   |                                      ^^^^^^^^^^^
   |                            Sealed type variable A cannot be instantiated to box A^? since
   |                            that type refers to the type variable A, which is not sealed.
   |                            This is often caused by a local capability in an argument of constructor ArrayBuffer
   |                            leaking as part of its result.
-- Error: tests/neg-custom-args/captures/buffers.scala:11:13 -----------------------------------------------------------
11 |  var elems: Array[A] = new Array[A](10) // error // error
   |             ^^^^^^^^
   |             Array cannot have element type A since
   |             that type variable is not sealed.
   |             Since arrays are mutable, they have to be treated like variables,
   |             so their element type must be sealed.
-- Error: tests/neg-custom-args/captures/buffers.scala:22:9 ------------------------------------------------------------
22 |  val x: Array[A] = new Array[A](10) // error
   |         ^^^^^^^^
   |         Array cannot have element type A since
   |         that type variable is not sealed.
   |         Since arrays are mutable, they have to be treated like variables,
   |         so their element type must be sealed.
