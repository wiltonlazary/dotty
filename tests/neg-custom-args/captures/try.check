-- Error: tests/neg-custom-args/captures/try.scala:23:16 ---------------------------------------------------------------
23 |  val a = handle[Exception, CanThrow[Exception]] { // error
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |          Sealed type variable R cannot be instantiated to box CT[Exception]^ since
   |          that type captures the root capability `cap`.
   |          This is often caused by a local capability in an argument of method handle
   |          leaking as part of its result.
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:29:43 ------------------------------------------
29 |  val b = handle[Exception, () -> Nothing] {  // error
   |                                           ^
   |                                           Found:    (x: CT[Exception]^) ->? () ->{x} Nothing
   |                                           Required: (x$0: CanThrow[Exception]) => () -> Nothing
30 |    (x: CanThrow[Exception]) => () => raise(new Exception)(using x)
31 |  } {
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:52:2 -------------------------------------------
47 |val global: () -> Int = handle {
48 |  (x: CanThrow[Exception]) =>
49 |    () =>
50 |      raise(new Exception)(using x)
51 |      22
52 |} { // error
   |                        ^
   |                        Found:    () ->{x$0} Int
   |                        Required: () -> Int
53 |  (ex: Exception) => () => 22
54 |}
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/try.scala:35:11 ---------------------------------------------------------------
35 |  val xx = handle {  // error
   |           ^^^^^^
   |           Sealed type variable R cannot be instantiated to box () => Int since
   |           that type captures the root capability `cap`.
   |           This is often caused by a local capability in an argument of method handle
   |           leaking as part of its result.
