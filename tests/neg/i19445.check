-- [E007] Type Mismatch Error: tests/neg/i19445.scala:17:15 ------------------------------------------------------------
17 |  val x: Int = ??? : UnwrapTypes[FooBar.Bar[Int]] // error
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |               Found:    Test.UnwrapTypes[FooBar.Bar[Int]]
   |               Required: Int
   |
   |               Note: a match type could not be fully reduced:
   |
   |                 trying to reduce  Test.UnwrapTypes[FooBar.Bar[Int]]
   |                 failed since selector FooBar.Bar[Int]
   |                 does not match  case BarFoo.Bar[x] => Test.UnwrapTypes[x]
   |                 and cannot be shown to be disjoint from it either.
   |                 Therefore, reduction cannot advance to the remaining cases
   |
   |                   case String => String
   |                   case Int => Int
   |
   | longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/i19445.scala:18:28 ------------------------------------------------------------
18 |  val tup: (Int, String)  = ??? : UnwrapTypes[(FooBar.Bar[Int], FooBar.Bar[String])] // error
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                            Found:    (Test.UnwrapTypes[FooBar.Bar[Int]], Test.UnwrapTypes[FooBar.Bar[String]])
   |                            Required: (Int, String)
   |
   |                            Note: a match type could not be fully reduced:
   |
   |                              trying to reduce  Test.UnwrapTypes[FooBar.Bar[Int]]
   |                              failed since selector FooBar.Bar[Int]
   |                              does not match  case BarFoo.Bar[x] => Test.UnwrapTypes[x]
   |                              and cannot be shown to be disjoint from it either.
   |                              Therefore, reduction cannot advance to the remaining cases
   |
   |                                case String => String
   |                                case Int => Int
   |
   | longer explanation available when compiling with `-explain`
